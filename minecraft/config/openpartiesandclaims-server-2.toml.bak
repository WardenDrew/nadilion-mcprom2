[serverConfig]
	#A list of options in the player config that individual players can reconfigure. If an option is in neither of the configurable option lists,
	#then the value in the default player config is used across the server. Check the default player config .toml file for the option names.
	playerConfigurablePlayerConfigOptions = ["claims.protectClaimedChunks", "claims.forceload.enabled", "claims.name", "claims.color", "claims.protection.fromParty", "claims.protection.fromAllyParties", "claims.protection.buttonsFromProjectiles", "claims.protection.targetsFromProjectiles", "claims.protection.platesFromPlayers", "claims.protection.platesFromMobs", "claims.protection.platesFromOther", "claims.protection.tripwireFromPlayers", "claims.protection.tripwireFromMobs", "claims.protection.tripwireFromOther", "claims.protection.cropTrample", "claims.protection.playerLightning", "claims.protection.fromFrostWalking", "claims.protection.entitiesFromPlayers", "claims.protection.entitiesFromMobs", "claims.protection.entitiesFromOther", "claims.protection.entitiesRedirect", "claims.protection.entitiesFromExplosions", "claims.protection.entitiesFromFire", "claims.protection.netherPortalsPlayers", "claims.protection.netherPortalsMobs", "claims.protection.netherPortalsOther", "claims.protection.fluidBarrier", "claims.protection.dispenserBarrier", "claims.protection.pistonBarrier", "claims.protection.itemTossPlayers", "claims.protection.itemTossMobs", "claims.protection.itemTossOther", "claims.protection.itemTossRedirect", "claims.protection.mobLoot", "claims.protection.playerDeathLoot", "claims.protection.itemPickupPlayers", "claims.protection.itemPickupMobs", "claims.protection.itemPickupRedirect", "claims.protection.xpPickup", "claims.protection.raids", "claims.protection.naturalSpawnHostile", "claims.protection.naturalSpawnFriendly", "claims.protection.spawnersHostile", "claims.protection.spawnersFriendly", "parties.name", "parties.shareLocationWithParty", "parties.shareLocationWithMutualAllyParties", "parties.receiveLocationsFromParty", "parties.receiveLocationsFromMutualAllyParties", "claims.protection.exceptionGroups.block.interact.Controls", "claims.protection.exceptionGroups.block.interact.Doors", "claims.protection.exceptionGroups.block.interact.Chests", "claims.protection.exceptionGroups.block.interact.Barrels", "claims.protection.exceptionGroups.block.interact.Ender_Chests", "claims.protection.exceptionGroups.block.interact.Shulker_Boxes", "claims.protection.exceptionGroups.block.interact.Furnaces", "claims.protection.exceptionGroups.block.interact.Hoppers", "claims.protection.exceptionGroups.block.interact.Dispenser-like", "claims.protection.exceptionGroups.block.interact.Anvils", "claims.protection.exceptionGroups.block.interact.Beds", "claims.protection.exceptionGroups.block.interact.Beacons", "claims.protection.exceptionGroups.block.interact.Enchanting_Tables", "claims.protection.exceptionGroups.block.break.Crops", "claims.protection.exceptionGroups.entity.interact.Traders", "claims.protection.exceptionGroups.entity.handInteract.Item_Frames", "claims.protection.exceptionGroups.entity.interact.Armor_Stands", "claims.protection.exceptionGroups.entity.break.Livestock", "claims.protection.exceptionGroups.entity.blockAccess.Villagers", "claims.protection.exceptionGroups.entity.entityAccess.Zombies", "claims.protection.exceptionGroups.entity.droppedItemAccess.Villagers", "claims.protection.exceptionGroups.entity.droppedItemAccess.Piglins", "claims.protection.exceptionGroups.entity.droppedItemAccess.Foxes", "claims.protection.exceptionGroups.item.interact.Books", "claims.protection.exceptionGroups.entity.barrier.Ender_Pearls", "/*remove comment to enable*/claims.protection.exceptionGroups.entity.barrier.Players"]
	#A list of additional options in the player config that OPs can reconfigure for players.
	#This is meant for options that should be configured per player but not by the players.
	#If an option is in neither of the configurable option lists, then the value in the default player config is used across the server.
	#Check the default player config .toml file for the option names.
	opConfigurablePlayerConfigOptions = ["claims.bonusChunkClaims", "claims.bonusChunkForceloads"]
	#The player party system to prefer and use for anything that can't support multiple systems (e.g. default, ftb_teams, argonauts, argonauts_guilds). Non-built-in party systems can be registered through the API with an addon.
	primaryPartySystem = "argonauts_guilds"
	#The default language used for server-side localization for players that don't have the mod installed.
	defaultLanguage = "en_us"
	#How often to auto-save modified data, e.g. parties, claims, player configs (in minutes).
	#Range: > 1
	autosaveInterval = 10
	#The permission system to use for everything that requires permission checks (e.g. permission_api, ftb_ranks, luck_perms, prometheus). Non-built-in permission systems can be registered through the API with an addon.
	permissionSystem = "prometheus"
	#How many sub-configs (sub-claims) can each player create.
	#Range: 0 ~ 1024
	playerSubConfigLimit = 64

	[serverConfig.claims]
		#The maximum number of chunks that a player can claim. Additional claims can be configured in the player config.
		#This value can be overridden with a player permission.
		#Range: > 0
		maxPlayerClaims = 500
		#The maximum distance on the X or Z axis (forming a square) that a chunk can be claimed at by a player.
		#Range: > 0
		maxClaimDistance = 5
		#The permission that should override the default "maxPlayerClaimForceloads" value. Set it to an empty string to never check permissions.
		#The permission override only takes effect after the player logs in at least once after a server (re)launch, so it is recommended to keep all permission-based forceload limits equal to or greater than "maxPlayerClaimForceloads".
		#The used permission system can be configured with "permissionSystem".
		maxPlayerClaimForceloadsPermission = "xaero.pac_max_forceloads"
		#How often to check for expired player chunk claims in order to remove them (in minutes). The interval is effectively rounded up to a multiple of 10 minutes.
		#Range: > 10
		playerClaimsExpirationCheckInterval = 360
		#The type of the list defined in "claimableDimensionsList". ONLY - include only the listed dimensions. ALL_BUT - include all but the listed dimensions.
		#Allowed Values: ONLY, ALL_BUT
		claimableDimensionsListType = "ALL_BUT"
		#The permission that should override the default "maxPlayerClaims" value. Set it to an empty string to never check permissions. The used permission system can be configured with "permissionSystem".
		maxPlayerClaimsPermission = "xaero.pac_max_claims"
		#Whether the claims part of this mod is enabled.
		enabled = true
		#Dimensions to include/exclude from being claimable, depending on the list type in "claimableDimensionsListType".
		#For example ["minecraft:overworld", "minecraft:the_nether"].
		#By default the list is empty and of type ALL_BUT, meaning that all dimensions are claimable.
		claimableDimensionsList = []
		#Whether to synchronize world chunk claims to the game clients. Enables client-side mods to access the claims data, e.g. to display it on a map.
		#ALL - all claims are synced. OWNED_ONLY - only the claims that the client player owns and server claims are synced. NOT_SYNCED - claims are not synced.
		#Allowed Values: NOT_SYNCED, OWNED_ONLY, ALL
		claimsSynchronization = "ALL"
		#Whether to allow existing player forceloads to stay active in unclaimable dimensions which were previously claimable. Only relevant if existing claims are allowed.
		allowExistingForceloadsInUnclaimableDimensions = false
		#The permission that gives non-OP players the ability to make server claims and enable server claim mode. The used permission system can be configured with "permissionSystem".
		serverClaimPermission = "xaero.pac_server_claims"
		#The permission that gives non-OP players the ability to enable claim admin mode. The used permission system can be configured with "permissionSystem".
		adminModePermission = "xaero.pac_admin_mode"
		#Whether to convert expired player chunk claims to "expired claims" instead of completely freeing them. This shouldn't be too bad for performance because it still reduces the number of unique claims.
		playerClaimsConvertExpiredClaims = true
		#The maximum number of claimed chunks that a player can forceload. Additional forceloads can be configured in the player config.
		#This value can be overridden with a player permission.
		#Range: > 0
		maxPlayerClaimForceloads = 10
		#For how long a player can stay completely inactive on the server until their claims are expired (in hours). This improves performance for servers running for years.
		#Range: > 1
		playerClaimsExpirationTime = 8760
		#Whether to allow existing player claims to stay active in unclaimable dimensions which were previously claimable.
		allowExistingClaimsInUnclaimableDimensions = true

		[serverConfig.claims.protection]
			entitiesAllowedToGriefEntities = ["interact$minecraft:potion", "interact$minecraft:trident", "interact$minecraft:(*_|)arrow", "interact$minecraft:ender_pearl", "interact$minecraft:egg"]
	[serverConfig.parties]
		#The maximum number of allies for a party. Existing allies are not removed if the limit is reduced.
		#Range: > 0
		maxPartyAllies = 64
		#How often to check for expired parties in order to remove them (in minutes). The interval is effectively rounded up to a multiple of 10 minutes.
		#Range: > 10
		partyExpirationCheckInterval = 360
		#The maximum number of invites to a party. Existing invites are not removed if the limit is reduced.
		#Range: > 1
		maxPartyInvites = 16
		#For how long a party (members) can stay completely inactive on the server until it is deleted (in hours). This improves performance for servers running for years.
		#Range: > 1
		partyExpirationTime = 168
		#Whether the parties part of this mod is enabled.
		enabled = true
		#The maximum number of members in a party. Existing members are not removed if the limit is reduced.
		#Range: > 1
		maxPartyMembers = 64
